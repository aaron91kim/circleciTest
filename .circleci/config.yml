version: 2.1
executors:
  my-executor:
    docker:
      - image: cimg/openjdk:17.0.3
orbs:
  win: circleci/windows@2.4.1
  unity: game-ci/unity@1.7.0
jobs:
  create-file:
    executor: win/default
    working_directory: /circleci/project
    steps:
      - run: echo "Hello, world!" > echo-output.ps1

      # Persist the specified paths (workspace/echo-output.ps1) into the workspace for use in downstream job.
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory in the execution
          # environment which is taken to be the root directory of the workspace.
          root: "."
          # Must be relative path from root
          paths:
            - echo-output.ps1
  check-file:
    executor: win/default
    steps:
      - attach_workspace:
          at: "."
      - run: ls
      - run: ls /
      - run: ls /home/
      - run: ls /home/circleci
      - run: ls /home/circleci/project
  pre-inno-setup:
    executor:
      name: win/default
    steps:
      - attach_workspace:
          at: "."
      - run: tar xf "./StandaloneWindows64.tar.gz" -C ./
      - run: ls
      - persist_to_workspace:
          root: "."
          paths:
            - XGolf.exe
  inno-setup:
    executor:
      name: win/default
    steps:
      - attach_workspace:
          at: "."
      - run: choco install innosetup
      - run: mkdir -p /unity_project/build/
      - run: tar xf "./StandaloneWindows64.tar.gz" -C /unity_project/build
      - run: iscc "c:\unity_project\build\installer.iss"
      - store_artifacts:
          path: xgolf_setup.exe
  inno-setup-with-signing:
    executor:
      name: win/default
    steps:
      - attach_workspace:
          at: "."
      - run: choco install innosetup
      - run: mkdir -p /unity_project/build/
      - run: tar xf "./StandaloneWindows64.tar.gz" -C /unity_project/build
      - run: mv artifacts/XGolf.exe /unity_project/build
      - run: iscc "c:\unity_project\build\installer.iss"
      - persist_to_workspace:
          root: "."
          paths:
            - xgolf_setup.exe
  unity-build:
    executor:
      name: "unity/windows-2019"
      size: "medium"
      editor_version: "2019.4.35f1"
      target_platform: "windows-il2cpp"
    steps:
      - run: git config --system core.longpaths true
      - checkout
      - run: pwd
      - unity/prepare-env:
          unity-serial-var-name: UNITY_SERIAL
          unity-username-var-name: UNITY_USERNAME
          unity-password-var-name: UNITY_PASSWORD
          no_output_timeout: "30m"
      - unity/test:
          step-name: "Check if the tests run and results are uploaded"
          test-platform: "editmode"
      - unity/build:
          step-name: "Build StandaloneWindows64 il2cpp"
          build-target: StandaloneWindows64
          build-method: "XGolf.Build.XGolfBuild.BuildGame"
          build-name: "XGolf"
          store-artifacts: false
          compress: true
          persist-to-workspace: true
          custom-parameters: "-VERSION=$VERSION -ENV=$ENV -API_URL=$API_URL -SIMULATOR_EMAIL=$SIMULATOR_EMAIL -SIMULATOR_PASSWORD=$SIMULATOR_PASSWORD -BUILD_NUMBER=$CIRCLE_BUILD_NUM -GA4_MEASUREMENT_ID=$GA4_MEASUREMENT_ID -GA4_STREAM_API_SECRET=$GA4_STREAM_API_SECRET"
      - unity/return-license:
          unity-username-var-name: UNITY_USERNAME
          unity-password-var-name: UNITY_PASSWORD
  sign:
    working_directory: /home/circleci/project
    # Create an environment variable
    environment:
      ENVIRONMENT_NAME: PROD #PROD
      COMMAND: sign
      WORKSPACE: /home/circleci/project
      ATTACHED_WORKINGSPACE: << parameters.attached-workingspace >>
      FILE_PATH: << parameters.file-path >>
      FILE_NAME: << parameters.file-name >>

    # Artifact name for signing
    parameters:
      file-path:
        type: string
        default: ""
      file-name:
        type: string
        default: ""
      attached-workingspace:
        type: string
        default: "."

    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    executor: my-executor
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - run: sudo mkdir -p ${ATTACHED_WORKINGSPACE}
      - run: sudo chmod 777 ${ATTACHED_WORKINGSPACE}
      # 1) Create Artifact Directory to store signed and unsigned artifact files
      - run:
          name: Create Artifacts Directory
          command: |
            mkdir -p ${WORKSPACE}/artifacts
            mkdir -p ${WORKSPACE}/packages
      # 2) Attach to Workspace in order to access the artifact file We cannot use variable to attach :'(
      - attach_workspace:
          at: /circleci/project
      - run: cat ${ATTACHED_WORKINGSPACE}/${FILE_NAME}
      # 3) Enable Docker for CodeSigner on Circle-CI
      - setup_remote_docker:
          name: Setup Remote Docker
          version: 20.10.24
          docker_layer_caching: true

      # 4) Pull Codesigner Docker Image From Github Registry
      - run:
          name: Docker Pull Image
          command: |
            docker pull ghcr.io/sslcom/codesigner:latest
            docker pull alpine:3.4

      # 5) This is the step where the created DLL, JAR, EXE, MSI, PS1 (artifact) files will be signed with CodeSignTool.
      - run:
          name: Sign Artifact File
          command: |
            docker create -v /codesign/packages  --name codesign-in  alpine:3.4 /bin/true
            docker create -v /codesign/artifacts --name codesign-out alpine:3.4 /bin/true
            docker cp ${ATTACHED_WORKINGSPACE}/${FILE_NAME} codesign-in:/codesign/packages
            docker run -i --rm --dns 8.8.8.8 --network host --volumes-from codesign-in --volumes-from codesign-out -e USERNAME=${USERNAME} -e PASSWORD="${PASSWORD}" -e CREDENTIAL_ID=${CREDENTIAL_ID} -e TOTP_SECRET=${TOTP_SECRET} -e ENVIRONMENT_NAME=${ENVIRONMENT_NAME} ghcr.io/sslcom/codesigner:latest ${COMMAND} -input_file_path=/codesign/packages/${FILE_NAME} -output_dir_path=/codesign/artifacts
            docker cp codesign-out:/codesign/artifacts/${FILE_NAME} ${WORKSPACE}/artifacts/${FILE_NAME}
      - run: ls artifacts
      - run: ls ${WORKSPACE}/artifacts
      - persist_to_workspace:
          root: "."
          paths:
            - artifacts/*
      - store_artifacts:
          path: artifacts

workflows:
  build-and-test:
    jobs:
      - unity-build:
          name: "build-stage"
          context:
            - unity
      - pre-inno-setup:
          name: "pre-inno-setup"
          requires:
            - build-stage
      - sign:
          name: "sign-executable"
          requires:
            - pre-inno-setup
          file-path: ""
          file-name: "XGolf.exe"
          attached-workingspace: "/circleci/project"
      - inno-setup-with-signing:
          name: "inno-setup"
          requires:
            - sign-executable
      - sign:
          name: "sign installer"
          requires:
            - inno-setup
          file-path: ""
          file-name: "xgolf_setup.exe"
          attached-workingspace: "/circleci/project"
# workflows:
#   build-and-test:
#     jobs:
#       - create-file:
#           name: "create-file"
#       - sign:
#           name: "sign"
#           requires:
#             - create-file
#           file-path: ""
#           file-name: "echo-output.ps1"
#           attached-workingspace: "/circleci/project"
#       - check-file:
#           name: "check-file"
#           requires:
#             - sign
