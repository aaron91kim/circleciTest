; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "XGolfAmerica"
#define MyAppVersion "2.1.1"
#define MyAppPublisher "XGolfAmerica"
#define MyAppURL "https://www.xgolfsimulator.com"
#define MyAppExeName "XGolf.exe"
#define MyBuildFilePath "C:\Users\aaron\Documents\Devs\xgolf_game_client/built"
#define MyBuildOutputPath "C:\Users\aaron\Documents\Devs\xgolf_game_client/built"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D78346D7-B52E-4261-AC7C-0912A9E62B82}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputDir={#MyBuildOutputPath}
OutputBaseFilename=xgolf_setup
Compression=lzma
SolidCompression=yes
WizardStyle=modern
;SignTool=signtool
;SignedUninstaller=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "{#MyBuildFilePath}\XGolf.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyBuildFilePath}\*"; DestDir: "{app}"; Excludes: "\XGolf_Data\StreamingAssets\*.unity3d, \XGolf_Data\StreamingAssets\Minimap\*"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{code:GetStreamingAssetsPath}\*.unity3d"; DestDir: "{app}\XGolf_Data\StreamingAssets"; Check: IsImportingCourseFiles; Flags: external ignoreversion;
Source: "{code:GetStreamingAssetsPath}\Minimap\*"; DestDir: "{app}\XGolf_Data\StreamingAssets\Minimap"; Check: IsImportingCourseFiles; Flags: external skipifsourcedoesntexist ignoreversion recursesubdirs createallsubdirs;
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Code]
var 
  AfterID: Integer;
  CourseImportPage: TInputDirWizardPage;
  SkipImportingRadio: TRadioButton;
  CourseImportingRadio: TRadioButton;
  OldNextButtonOnClick: TNotifyEvent;
  CourseDirPath: string;

function FileExistsWildcard(const FileName: string): Boolean;
var
  FindRec: TFindRec;
begin
  Result := False;
  if FindFirst(FileName, FindRec) then
  try
    Result := FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0;
  finally
    FindClose(FindRec);
  end;
end;

procedure LocationButtonClick(Sender: TObject);
begin
  CourseImportPage.Edits[0].Enabled := CourseImportingRadio.Checked;
  CourseImportPage.Buttons[0].Enabled := CourseImportingRadio.Checked;
end;

procedure NextButtonOnClick(Sender: TObject);
begin
  { Do not validate, when "No" is selected }
  if (WizardForm.CurPageID = CourseImportPage.ID) then
  begin
    if(SkipImportingRadio.Checked) then
    begin
      CourseDirPath := CourseImportPage.Values[0];
      CourseImportPage.Values[0] := GetWinDir; { Force value to pass validation }
      OldNextButtonOnClick(Sender);
      CourseImportPage.Values[0] := CourseDirPath;
    end
    else
    begin
      if(FileExistsWildcard(CourseImportPage.Values[0] + '/*.unity3d')) then
      begin
        OldNextButtonOnClick(Sender);
      end
      else
      begin
        MsgBox(
          'Path:' + CourseImportPage.Values[0] + ' doesnt have course files' + #13#10 + 
          'Please select StreamingAssets folder that contains unity3d files with Minimap',
          mbInformation, MB_OK
        );
      end;
    end;
  end
  else
  begin
    OldNextButtonOnClick(Sender);
  end;
end;

procedure ScaleFixedHeightControl(Control: TButtonControl);
begin
  Control.Height := ScaleY(Control.Height);
end;

function GetStreamingAssetsPath(Param: string): string;
begin
  if Assigned(CourseImportPage) then
   Result := CourseImportPage.Values[0]
  else 
   Result := '';
end;

procedure InitializeWizard;
begin
  AfterID := wpSelectTasks;
  
  CourseImportPage := CreateInputDirPage(
    wpSelectTasks,
    'Courses import', 'Please click browse button then select StreamingAssets folder',
    'Do you want to import the courses?', False, 'New Folder');
  CourseImportPage.Add('');

  SkipImportingRadio := TRadioButton.Create(WizardForm);
  SkipImportingRadio.Parent := CourseImportPage.Surface;
  SkipImportingRadio.Top := CourseImportPage.Edits[0].Top;
  SkipImportingRadio.Caption := 'No';
  SkipImportingRadio.Checked := True;
  SkipImportingRadio.OnClick := @LocationButtonClick
  ScaleFixedHeightControl(SkipImportingRadio);
  
  CourseImportingRadio := TRadioButton.Create(WizardForm);
  CourseImportingRadio.Parent := CourseImportPage.Surface;
  CourseImportingRadio.Top :=
    SkipImportingRadio.Top + SkipImportingRadio.Height + ScaleY(8);
  CourseImportingRadio.Caption := 'Yes';
  CourseImportingRadio.OnClick := @LocationButtonClick;
  ScaleFixedHeightControl(SkipImportingRadio);

  CourseImportPage.Buttons[0].Top :=
    CourseImportPage.Buttons[0].Top +
    ((CourseImportingRadio.Top + CourseImportingRadio.Height + ScaleY(8)) -
      CourseImportPage.Edits[0].Top);
  CourseImportPage.Edits[0].Top :=
    CourseImportingRadio.Top + CourseImportingRadio.Height + ScaleY(8);
  CourseImportPage.Edits[0].Left := CourseImportPage.Edits[0].Left + ScaleX(16);
  CourseImportPage.Edits[0].Width := CourseImportPage.Edits[0].Width - ScaleX(16);
  CourseImportPage.Edits[0].TabOrder := CourseImportingRadio.TabOrder + 1;
  CourseImportPage.Buttons[0].TabOrder := CourseImportPage.Edits[0].TabOrder + 1;
  AfterID := CourseImportPage.ID;

  LocationButtonClick(nil); { Update edit for initial state of buttons }


  OldNextButtonOnClick := WizardForm.NextButton.OnClick;
  WizardForm.NextButton.OnClick := @NextButtonOnClick;
end;

function IsImportingCourseFiles(): Boolean;
begin
  Result := CourseImportingRadio.Checked;
end;
